NOTE:
- During Release 2 the entire team contributed in maintaining the release and sprint plan documentation during team meetings.

- My blog entries detail further information regarding specific artifacts' development as required.

- The majority of the artifacts on the repository were edited to fix bugs at points in time by other members of the group, all of which can be seen in the git commit logs.

1. Payment Adding and Retrieval (php/paymentsDB)

I created a method which would take the input of a payment form and orderID get variable and run an SQL insertion query to insert payment information to the payments table for the order. I also constructed the select query to retrieve payment information for a specific order (if one existed) and output the results to a table on the view-order page. If no payment was found, a button would appear on the page which would take the user to the add payment form.

2. Orders and Users Improvements and Refactoring (orders.php, removed ordersDB.php, users.php, reduced usersDB.php)
I spent significant time refactoring the Order and User classes, moving functionality such as object creation via the database into a method which would retrieve and assign values to the current object. An empty object could be created and the desired database row's ID could be entered to retrieve the desired entry's values. I completed this along with single output functionality, and encapsulation of values with getter retrieval.

3. Order Tracking (order-tracking.php, search.php, view-order.php)
I constructed the order-tracking page which would display a logged in customer's personal orders for viewing updates. I also updated the order search query to exclude packages with a 'delivered' status by default. This would prevent cluttering the interface with past packages unless the status was specifically requested in a search form. With the addition of this feature I also provided a delete-order page called by a button in the view-order file, allowing for staff to hide orders by setting their status to delivered. This was a temporary deletion process and isn't viable in the long term as it would confuse real delivered packages with deleted ones in future order history additions.

4. Database Class (database.php)
In sprint 4, I constructed a database class to reduce repeated code in SQL Querying. I separated queries into two lots, select statements (which would return a value) and update statements (which updated the 'last row ID' and  included insertion statements). When a query was required, the database object was constructed, also initialising a pdo statement for the object. A query and a parameters array could then be provided to either the select_statment or update_statement method which would then bind the values of the array using a foreach loop, and run the query accordingly.

5. Update Status and Milestone Timestamp Recording (orders.php)
In Sprint 3 I created an updateStatus method, originally in the ordersDB file which I later refactored into the order class. This would run an update query to the orders table changing the status to one specified in the method argument. This was later used in the driver interface for milestone changes. Another minor addition was made in including the saving of timestamps. I utilised a table setup to insert an entry for an order upon its creation and update timestamps upon the completion of each milestone in the updateStatus function of the Order class. The timestamps are visible in the database but we did not have any requirements to output this information during release 2.
